{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\EmployeeManagement\\\\screens\\\\ManagementEmployeeScreen.js\";\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport EmployeeCell from \"../component/EmployeeCell\";\n\nvar db = require(\"../Data/db\");\n\nimport Colors from \"../constant/Colors\";\nvar createNewEmployeeUrl = '/api/employees/create';\nvar editEmployeeUrl = \"/api/employees/update\";\nvar deleteEmployeeUrl = \"/api/employees/delete\";\n\nvar ManagementEmployeeScreen = function ManagementEmployeeScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      employees = _useState2[0],\n      setEmployees = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  useEffect(function () {\n    console.log(\"useEffect\");\n    fetchEmployee();\n  }, []);\n  useEffect(function () {\n    props.navigation.setOptions({\n      headerTitle: \"Employees\",\n      headerRight: function headerRight() {\n        return React.createElement(Button, {\n          title: \"Add\",\n          onPress: function onPress() {\n            props.navigation.navigate('EmployeeDetailsScreen', {\n              title: 'Add employee',\n              onConfirm: addEmployee\n            });\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 33\n          }\n        });\n      }\n    });\n  }, []);\n\n  var fetchEmployee = function fetchEmployee() {\n    var res, data;\n    return _regeneratorRuntime.async(function fetchEmployee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"/api/employees\"));\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 5:\n            data = _context.sent;\n            console.log(data);\n            setEmployees(data.employees);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var renderEmployees = function renderEmployees(_ref) {\n    var item = _ref.item;\n    return React.createElement(EmployeeCell, {\n      Employee: item,\n      onPressEmployee: function onPressEmployee() {\n        return onPressEmployeeCell(item);\n      },\n      onLongPressEmployee: function onLongPressEmployee() {\n        return onLongPressEmployeeCell(item);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    });\n  };\n\n  var onPressEmployeeCell = function onPressEmployeeCell(item) {\n    return props.navigation.navigate('EmployeeDetailsScreen', {\n      title: 'Edit employee',\n      employee: item,\n      onConfirm: editEmployee\n    });\n  };\n\n  var onLongPressEmployeeCell = function onLongPressEmployeeCell(item) {\n    return Alert.alert(\"Alert\", \"Are you sure you want to delete this employee?\", [{\n      text: \"Yes\",\n      onPress: function onPress() {\n        return deleteEmployee(item);\n      },\n      style: \"confirm\"\n    }, {\n      text: \"No\",\n      onPress: function onPress() {\n        return setModalVisible(false);\n      },\n      style: \"cancel\"\n    }]);\n  };\n\n  var addEmployee = function addEmployee(newEmployee) {\n    var response, resData, _newEmployee, updateEmployees;\n\n    return _regeneratorRuntime.async(function addEmployee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            console.log(\"addEmployee\");\n            Keyboard.dismiss();\n\n            if (!(!newEmployee.employee_name || !newEmployee.employee_age || !newEmployee.employee_salary)) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", Alert.alert(\"שגיאה\", \"נא מלא את כל פרטי העובד\", [{\n              text: \"אישור\"\n            }], {\n              cancelable: true\n            }));\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(fetch(createNewEmployeeUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(newEmployee)\n            }));\n\n          case 7:\n            response = _context2.sent;\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 10:\n            resData = _context2.sent;\n\n            if (!(resData.status == \"success\")) {\n              _context2.next = 20;\n              break;\n            }\n\n            _newEmployee = resData.data;\n            updateEmployees = _toConsumableArray(employees);\n            updateEmployees.push(_newEmployee);\n            console.log(\"updateEmployees\", updateEmployees);\n            setEmployees(updateEmployees);\n            Alert.alert(\"Alert\", \"Employee created successfully\", [{\n              text: \"OK\",\n              onPress: function onPress() {\n                return setModalVisible(false);\n              },\n              style: \"cancel\"\n            }]);\n            _context2.next = 21;\n            break;\n\n          case 20:\n            throw new Error();\n\n          case 21:\n            _context2.next = 26;\n            break;\n\n          case 23:\n            _context2.prev = 23;\n            _context2.t0 = _context2[\"catch\"](0);\n            Alert.alert(\"Alert\", \"Error, employee not created\");\n\n          case 26:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 23]], Promise);\n  };\n\n  var editEmployee = function editEmployee(Employee) {\n    var response, resData, editedEmployee, updatedEmployees, employeeIndx;\n    return _regeneratorRuntime.async(function editEmployee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            console.log(\"editEmployee\", Employee);\n            Keyboard.dismiss();\n\n            if (!(!Employee.employee_name || !Employee.employee_age || !Employee.employee_salary)) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", Alert.alert(\"שגיאה\", \"נא מלא את כל פרטי העובד\", [{\n              text: \"אישור\"\n            }], {\n              cancelable: true\n            }));\n\n          case 5:\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(fetch(editEmployeeUrl + Employee.id, {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(Employee)\n            }));\n\n          case 7:\n            response = _context3.sent;\n            _context3.next = 10;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 10:\n            resData = _context3.sent;\n\n            if (!(resData.status == \"success\")) {\n              _context3.next = 25;\n              break;\n            }\n\n            editedEmployee = resData.data;\n            updatedEmployees = _toConsumableArray(employees);\n            employeeIndx = updatedEmployees.findIndex(function (employee) {\n              return employee.id == editedEmployee.id;\n            });\n            console.log(\"employeeIndx\", employeeIndx);\n\n            if (!(employeeIndx >= 0)) {\n              _context3.next = 22;\n              break;\n            }\n\n            updatedEmployees[employeeIndx] = editedEmployee;\n            setEmployees(updatedEmployees);\n            Alert.alert(\"Alert\", \"Employee updated successfully\", [{\n              text: \"OK\",\n              onPress: function onPress() {\n                return setModalVisible(false);\n              },\n              style: \"cancel\"\n            }]);\n            _context3.next = 23;\n            break;\n\n          case 22:\n            throw new Error();\n\n          case 23:\n            _context3.next = 26;\n            break;\n\n          case 25:\n            throw new Error();\n\n          case 26:\n            _context3.next = 31;\n            break;\n\n          case 28:\n            _context3.prev = 28;\n            _context3.t0 = _context3[\"catch\"](0);\n            Alert.alert(\"Alert\", \"Error to update employee\");\n\n          case 31:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 28]], Promise);\n  };\n\n  var deleteEmployee = function deleteEmployee(Employee) {\n    var response, resData, editedEmployeeId, updatedEmployees, employeeIndx;\n    return _regeneratorRuntime.async(function deleteEmployee$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            console.log(\"deleteEmployee\", Employee, Employee.id);\n            Keyboard.dismiss();\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(fetch(deleteEmployeeUrl + Employee.id, {\n              method: 'DELETE',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }));\n\n          case 5:\n            response = _context4.sent;\n            _context4.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            resData = _context4.sent;\n\n            if (!(resData.status == \"success\")) {\n              _context4.next = 22;\n              break;\n            }\n\n            editedEmployeeId = resData.data;\n            updatedEmployees = _toConsumableArray(employees);\n            employeeIndx = updatedEmployees.findIndex(function (employee) {\n              return employee.id == editedEmployeeId;\n            });\n\n            if (!(employeeIndx >= 0)) {\n              _context4.next = 19;\n              break;\n            }\n\n            updatedEmployees.splice(employeeIndx, 1);\n            setEmployees(updatedEmployees);\n            Alert.alert(\"Alert\", \"Employee deleted successfully\", [{\n              text: \"OK\",\n              onPress: function onPress() {\n                return setModalVisible(false);\n              },\n              style: \"cancel\"\n            }]);\n            _context4.next = 20;\n            break;\n\n          case 19:\n            throw new Error();\n\n          case 20:\n            _context4.next = 23;\n            break;\n\n          case 22:\n            throw new Error();\n\n          case 23:\n            _context4.next = 28;\n            break;\n\n          case 25:\n            _context4.prev = 25;\n            _context4.t0 = _context4[\"catch\"](0);\n            Alert.alert(\"Alert\", \"Error deleting employee\");\n\n          case 28:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 25]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.root,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: employees,\n    renderItem: renderEmployees,\n    keyboardShouldPersistTaps: \"always\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  root: {\n    padding: 2,\n    backgroundColor: Colors.primary\n  },\n  inputText: {\n    width: '80%',\n    height: 40,\n    backgroundColor: 'lightgrey',\n    borderRadius: 20,\n    margin: 12,\n    textAlign: 'center'\n  }\n});\nexport default ManagementEmployeeScreen;","map":{"version":3,"sources":["C:/Users/User/Documents/EmployeeManagement/screens/ManagementEmployeeScreen.js"],"names":["React","useEffect","useState","useCallback","EmployeeCell","db","require","Colors","createNewEmployeeUrl","editEmployeeUrl","deleteEmployeeUrl","ManagementEmployeeScreen","props","employees","setEmployees","modalVisible","setModalVisible","console","log","fetchEmployee","navigation","setOptions","headerTitle","headerRight","navigate","title","onConfirm","addEmployee","fetch","res","json","data","renderEmployees","item","onPressEmployeeCell","onLongPressEmployeeCell","employee","editEmployee","Alert","alert","text","onPress","deleteEmployee","style","newEmployee","Keyboard","dismiss","employee_name","employee_age","employee_salary","cancelable","method","headers","body","JSON","stringify","response","resData","status","updateEmployees","push","Error","Employee","id","editedEmployee","updatedEmployees","employeeIndx","findIndex","editedEmployeeId","splice","styles","root","StyleSheet","create","padding","backgroundColor","primary","inputText","width","height","borderRadius","margin","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { View, Text, StyleSheet, FlatList, Button, Modal, Pressable, TextInput, Keyboard, Alert } from 'react-native';\r\nimport EmployeeCell from '../component/EmployeeCell';\r\n// import EmployeeDetailsScreen from './EmployeeDetailsScreen';\r\nconst db = require('../Data/db');\r\nimport Colors from '../constant/Colors';\r\n\r\n// const createNewEmployeeUrl = 'https://dummy.restapiexample.com/api/v1/create';\r\n// const editEmployeeUrl = \"https://dummy.restapiexample.com/api/v1/update/\";\r\n// const deleteEmployeeUrl = \"https://dummy.restapiexample.com/api/v1/delete/\";\r\nconst createNewEmployeeUrl = '/api/employees/create';\r\nconst editEmployeeUrl = \"/api/employees/update\";\r\nconst deleteEmployeeUrl = \"/api/employees/delete\";\r\n\r\nconst ManagementEmployeeScreen = props => {\r\n\r\n    const [employees, setEmployees] = useState([]);\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log(\"useEffect\");\r\n        fetchEmployee();\r\n        // setEmployees(db.employees);\r\n\r\n\r\n        // fetch(\"/api/employees\")\r\n        //     .then((res) => res.json())\r\n        //     .then((json) => console.log(json))\r\n        //     .catch(err => console.error(err))\r\n\r\n\r\n        // fetch('www.localhost:3000/employees', {\r\n        //     method: 'GET',\r\n        //     headers: {\r\n        //         Accept: 'application/json',\r\n        //         'Content-Type': 'application/json',\r\n        //     },\r\n        // })\r\n        // .then(response =>{\r\n        //     console.log(response);\r\n        //     setEmployees(db.employees);\r\n        // })\r\n        // .catch(error =>{\r\n        //     console.log(error);\r\n        // })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        props.navigation.setOptions({\r\n            headerTitle: \"Employees\",\r\n            headerRight: () => (<Button title='Add' onPress={() => {\r\n                props.navigation.navigate('EmployeeDetailsScreen', {\r\n                    title: 'Add employee',\r\n                    onConfirm: addEmployee\r\n                });\r\n            }} />),\r\n        })\r\n\r\n    }, []);\r\n\r\n    const fetchEmployee = async()=>{\r\n        const res = await fetch(\"/api/employees\");\r\n        const data = await res.json();\r\n        console.log(data);\r\n        setEmployees(data.employees);\r\n    }\r\n\r\n    const renderEmployees = ({ item }) => {\r\n        return (\r\n            <EmployeeCell\r\n                Employee={item}\r\n                onPressEmployee={() => onPressEmployeeCell(item)}\r\n                onLongPressEmployee={() => onLongPressEmployeeCell(item)}\r\n            />\r\n        )\r\n    }\r\n\r\n    const onPressEmployeeCell = (item) => (\r\n        props.navigation.navigate('EmployeeDetailsScreen', {\r\n            title: 'Edit employee',\r\n            employee: item,\r\n            onConfirm: editEmployee\r\n        })\r\n    )\r\n\r\n    const onLongPressEmployeeCell = (item) => (\r\n        Alert.alert(\r\n            \"Alert\",\r\n            \"Are you sure you want to delete this employee?\",\r\n            [\r\n                {\r\n                    text: \"Yes\",\r\n                    onPress: () => deleteEmployee(item),\r\n                    style: \"confirm\"\r\n                },\r\n                {\r\n                    text: \"No\",\r\n                    onPress: () => setModalVisible(false),\r\n                    style: \"cancel\"\r\n                },\r\n            ]\r\n        )\r\n    )\r\n\r\n    const addEmployee = async (newEmployee) => {\r\n        try {\r\n            console.log(\"addEmployee\");\r\n            Keyboard.dismiss();\r\n\r\n            // if not fill all the fields, alert\r\n            if (!newEmployee.employee_name || !newEmployee.employee_age || !newEmployee.employee_salary) {\r\n                return Alert.alert(\r\n                    \"שגיאה\",\r\n                    \"נא מלא את כל פרטי העובד\",\r\n                    [\r\n                        { text: \"אישור\" }\r\n                    ],\r\n                    { cancelable: true }\r\n                )\r\n            }\r\n\r\n            const response = await fetch(createNewEmployeeUrl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                // body: newEmployee\r\n                body: JSON.stringify(newEmployee) // body data type must match \"Content-Type\" header\r\n            });\r\n\r\n            const resData = await response.json();\r\n            if (resData.status == \"success\") {\r\n                let newEmployee = resData.data;\r\n                const updateEmployees = [...employees];\r\n                updateEmployees.push(newEmployee);\r\n                console.log(\"updateEmployees\", updateEmployees);\r\n\r\n                setEmployees(updateEmployees);\r\n                Alert.alert(\r\n                    \"Alert\",\r\n                    \"Employee created successfully\",\r\n                    [\r\n                        {\r\n                            text: \"OK\",\r\n                            onPress: () => setModalVisible(false),\r\n                            style: \"cancel\"\r\n                        },\r\n                    ]);\r\n            }\r\n            else {\r\n                throw new Error;\r\n            }\r\n        }\r\n        catch (e) {\r\n            Alert.alert(\"Alert\", \"Error, employee not created\");\r\n        }\r\n    }\r\n\r\n    const editEmployee = async (Employee) => {\r\n        try {\r\n            console.log(\"editEmployee\", Employee);\r\n            Keyboard.dismiss();\r\n\r\n            // if not fill all the fields, alert\r\n            if (!Employee.employee_name || !Employee.employee_age || !Employee.employee_salary) {\r\n                return Alert.alert(\r\n                    \"שגיאה\",\r\n                    \"נא מלא את כל פרטי העובד\",\r\n                    [\r\n                        { text: \"אישור\" }\r\n                    ],\r\n                    { cancelable: true }\r\n                )\r\n            }\r\n\r\n            const response = await fetch(editEmployeeUrl + Employee.id, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(Employee)\r\n            });\r\n\r\n            const resData = await response.json();\r\n\r\n            if (resData.status == \"success\") {\r\n                let editedEmployee = resData.data;\r\n                const updatedEmployees = [...employees];\r\n                const employeeIndx = updatedEmployees.findIndex(employee => employee.id == editedEmployee.id);\r\n                console.log(\"employeeIndx\", employeeIndx);\r\n                if (employeeIndx >= 0) {\r\n                    updatedEmployees[employeeIndx] = editedEmployee;\r\n                    setEmployees(updatedEmployees);\r\n                    Alert.alert(\r\n                        \"Alert\",\r\n                        \"Employee updated successfully\",\r\n                        [\r\n                            {\r\n                                text: \"OK\",\r\n                                onPress: () => setModalVisible(false),\r\n                                style: \"cancel\"\r\n                            },\r\n                        ]);\r\n                }\r\n                else {\r\n                    throw new Error;\r\n                }\r\n            }\r\n            else {\r\n                throw new Error;\r\n            }\r\n        }\r\n        catch (e) {\r\n            Alert.alert(\"Alert\", \"Error to update employee\");\r\n        }\r\n    }\r\n\r\n    const deleteEmployee = async (Employee) => {\r\n        try {\r\n            console.log(\"deleteEmployee\", Employee, Employee.id);\r\n            Keyboard.dismiss();\r\n\r\n            const response = await fetch(deleteEmployeeUrl + Employee.id, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            });\r\n\r\n            const resData = await response.json();\r\n\r\n            if (resData.status == \"success\") {\r\n                let editedEmployeeId = resData.data;\r\n                const updatedEmployees = [...employees];\r\n                const employeeIndx = updatedEmployees.findIndex(employee => employee.id == editedEmployeeId);\r\n                if (employeeIndx >= 0) {\r\n                    updatedEmployees.splice(employeeIndx, 1);\r\n                    setEmployees(updatedEmployees);\r\n                    Alert.alert(\r\n                        \"Alert\",\r\n                        \"Employee deleted successfully\",\r\n                        [\r\n                            {\r\n                                text: \"OK\",\r\n                                onPress: () => setModalVisible(false),\r\n                                style: \"cancel\"\r\n                            },\r\n                        ]);\r\n                }\r\n                else {\r\n                    throw new Error;\r\n                }\r\n            }\r\n            else {\r\n                throw new Error;\r\n            }\r\n        }\r\n        catch (err) {\r\n            Alert.alert(\"Alert\", \"Error deleting employee\");\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <View style={styles.root}>\r\n            <FlatList\r\n                data={employees}\r\n                renderItem={renderEmployees}\r\n                keyboardShouldPersistTaps='always'\r\n            >\r\n\r\n                {/* <Text>ManagementEmployeeScreen</Text> */}\r\n            </FlatList>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    root: {\r\n        padding: 2,\r\n        // margin: 3,\r\n        backgroundColor: Colors.primary\r\n    },\r\n    inputText: {\r\n        width: '80%',\r\n        height: 40,\r\n        backgroundColor: 'lightgrey',\r\n        // backgroundColor: Colors.primary,\r\n        borderRadius: 20,\r\n        margin: 12,\r\n        textAlign: 'center'\r\n    },\r\n});\r\n\r\nexport default ManagementEmployeeScreen;"]},"metadata":{},"sourceType":"module"}