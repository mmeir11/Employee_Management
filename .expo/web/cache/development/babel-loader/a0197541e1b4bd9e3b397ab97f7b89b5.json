{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createServer } from \"miragejs\";\n\nvar db = require(\"../Data/db\");\n\nimport * as firebase from 'firebase';\nimport config from \".././src/config\";\nexport function makeServer() {\n  if (window.server) {\n    server.shutdown();\n  }\n\n  window.server = createServer({\n    routes: function routes() {\n      this.get(\"/api/employees\", function (schema, request) {\n        return db;\n      });\n      this.post(\"/api/employees/create\", function (schema, request) {\n        var newEmployee = JSON.parse(request.requestBody);\n        var employeeExist = db.employees.find(function (employee) {\n          return employee.id == newEmployee.id;\n        });\n\n        if (!employeeExist) {\n          db.employees.push(newEmployee);\n          res.status(200).send(newEmployee);\n        } else {\n          res.status(400).send(\"Employee exist\");\n        }\n      });\n      this.get(\"/api/signup\", function _callee(schema, request) {\n        var email, password;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                email = \"z@z.com\";\n                password = \"z@z.com\";\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(firebase.auth().createUserWithEmailAndPassword(email, password).then(function (user) {\n                  console.log(\"SignupUser\", user);\n                }).catch(function (error) {\n                  var errorCode = error.code;\n                  var errorMessage = error.message;\n                  throw error;\n                }));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    }\n  });\n  return window.server;\n}","map":{"version":3,"sources":["C:/Users/User/Documents/EmployeeManagement/server/serverMirage.js"],"names":["createServer","db","require","firebase","config","makeServer","window","server","shutdown","routes","get","schema","request","post","newEmployee","JSON","parse","requestBody","employeeExist","employees","find","employee","id","push","res","status","send","email","password","auth","createUserWithEmailAndPassword","then","user","console","log","catch","error","errorCode","code","errorMessage","message"],"mappings":";AACA,SAASA,YAAT,QAA6B,UAA7B;;AACA,IAAMC,EAAE,GAAGC,OAAO,cAAlB;;AAEA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAOC,MAAP;AAGA,OAAO,SAASC,UAAT,GAAsB;AACzB,MAAIC,MAAM,CAACC,MAAX,EAAmB;AACfA,IAAAA,MAAM,CAACC,QAAP;AACH;;AAQDF,EAAAA,MAAM,CAACC,MAAP,GAAgBP,YAAY,CAAC;AAEzBS,IAAAA,MAFyB,oBAEhB;AACL,WAAKC,GAAL,CAAS,gBAAT,EAA2B,UAACC,MAAD,EAASC,OAAT,EAAqB;AAC5C,eAAOX,EAAP;AACH,OAFD;AAIA,WAAKY,IAAL,CAAU,uBAAV,EAAmC,UAACF,MAAD,EAASC,OAAT,EAAqB;AACpD,YAAME,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACK,WAAnB,CAApB;AACA,YAAMC,aAAa,GAAGjB,EAAE,CAACkB,SAAH,CAAaC,IAAb,CAAkB,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,EAAT,IAAeR,WAAW,CAACQ,EAA/B;AAAA,SAA1B,CAAtB;;AACA,YAAI,CAACJ,aAAL,EAAoB;AAChBjB,UAAAA,EAAE,CAACkB,SAAH,CAAaI,IAAb,CAAkBT,WAAlB;AACAU,UAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBZ,WAArB;AACH,SAHD,MAIK;AACDU,UAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACH;AAEJ,OAXD;AAaA,WAAKhB,GAAL,CAAS,aAAT,EAAwB,iBAAMC,MAAN,EAAcC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBe,gBAAAA,KADgB,GACR,SADQ;AAEhBC,gBAAAA,QAFgB,GAEL,SAFK;AAAA;AAAA,iDAGdzB,QAAQ,CAAC0B,IAAT,GAAgBC,8BAAhB,CAA+CH,KAA/C,EAAsDC,QAAtD,EACDG,IADC,CACI,UAACC,IAAD,EAAU;AACZC,kBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,IAA1B;AAEH,iBAJC,EAKDG,KALC,CAKK,UAACC,KAAD,EAAW;AACd,sBAAIC,SAAS,GAAGD,KAAK,CAACE,IAAtB;AACA,sBAAIC,YAAY,GAAGH,KAAK,CAACI,OAAzB;AACA,wBAAMJ,KAAN;AACH,iBATC,CAHc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAxB;AAgBH;AApCwB,GAAD,CAA5B;AAsCA,SAAO9B,MAAM,CAACC,MAAd;AACH","sourcesContent":["\r\nimport { createServer } from \"miragejs\"\r\nconst db = require('../Data/db');\r\n// var defaultDatabase = firebase.database();\r\nimport * as firebase from 'firebase';\r\nimport config from '.././src/config';\r\n\r\n\r\nexport function makeServer() {\r\n    if (window.server) {\r\n        server.shutdown()\r\n    }\r\n\r\n    // if (!firebase.apps.length) {\r\n    //     console.log(\"firebase.initializeApp\");\r\n    //     firebase.initializeApp(config.firebaseConfig);\r\n    // }\r\n\r\n    //miragejs\r\n    window.server = createServer({\r\n\r\n        routes() {\r\n            this.get(\"/api/employees\", (schema, request) => {\r\n                return db;\r\n            });\r\n\r\n            this.post(\"/api/employees/create\", (schema, request) => {\r\n                const newEmployee = JSON.parse(request.requestBody);\r\n                const employeeExist = db.employees.find(employee => employee.id == newEmployee.id);\r\n                if (!employeeExist) {\r\n                    db.employees.push(newEmployee);\r\n                    res.status(200).send(newEmployee);\r\n                }\r\n                else { // empolyee exsist\r\n                    res.status(400).send(\"Employee exist\");\r\n                }\r\n                // return schema.users.create(attrs);\r\n            });\r\n\r\n            this.get(\"/api/signup\", async(schema, request) => {\r\n                let email = \"z@z.com\";\r\n                let password = \"z@z.com\"\r\n                await firebase.auth().createUserWithEmailAndPassword(email, password)\r\n                    .then((user) => {\r\n                        console.log(\"SignupUser\", user);\r\n                        // setCurrentUserId(user.uid);\r\n                    })\r\n                    .catch((error) => {\r\n                        var errorCode = error.code;\r\n                        var errorMessage = error.message;\r\n                        throw error;\r\n                    });\r\n\r\n            });\r\n\r\n        },\r\n    })\r\n    return window.server;\r\n}"]},"metadata":{},"sourceType":"module"}